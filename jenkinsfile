pipeline {
    agent any
    tools {
        maven 'maven3'
    }

    parameters {
        choice(name: 'DEPLOY_ENV', choices: ['blue', 'green'], description: 'Choose which environment to deploy: Blue or Green')
        choice(name: 'DOCKER_TAG', choices: ['blue', 'green'], description: 'Choose the Docker image tag for the deployment')
        booleanParam(name: 'SWITCH_TRAFFIC', defaultValue: false, description: 'Switch traffic between Blue and Green')
    }

    environment {
        DOCKER_IMAGE= "anithapatcha/springboot"
        TAG = "${params.DOCKER_TAG}"
    }    

    stages {
        stage('Git Checkout') {
            steps {
                git branch: "main", credentialsId: 'git-cred-ID', url: 'https://github.com/ChavaSirisha/BlueGreenDeployment.git'
            }
        }
        stage('Maven Compile') {
            steps {
                sh 'mvn compile'
            }
        }
        stage('Maven Test') {
            steps {
                sh 'mvn test'
            }
        }
        stage('Maven Build') {
            steps {
                sh 'mvn package -DskipTests'
            }
        }
        stage('Build Docker Image and Tag') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                    sh 'docker build -t ${DOCKER_IMAGE}:${TAG} .'
                    }
                }
            }
        }  
        stage('Push Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh 'docker push ${DOCKER_IMAGE}:${TAG}'
                    }
                }
            } 
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    def deploymentFile = ""
                    if (params.DEPLOY_ENV == 'blue') {
                        deploymentFile = 'deployment-blue.yaml'
                    } else {
                        deploymentFile = 'deployment-green.yaml'
                    }

                    withKubeConfig(caCertificate: '', clusterName: 'test-cluster', contextName: '', credentialsId: 'k8-token', namespace: '', restrictKubeConfigAccess: false, serverUrl: 'https://875D9268D454CB5CBD95F54559B3D856.gr7.us-east-1.eks.amazonaws.com') {
                        sh "kubectl apply -f ${deploymentFile} "
                        sh 'kubectl apply -f service.yaml'
                    }
                }
            }
        }
        
        stage('Switch Traffic Between Blue & Green Environment') {
            when {
                expression { return params.SWITCH_TRAFFIC }
            }
            steps {
                script {
                    def newEnv = params.DEPLOY_ENV

                    // Always switch traffic based on DEPLOY_ENV
                    withKubeConfig(caCertificate: '', clusterName: 'test-cluster', contextName: '', credentialsId: 'k8-token', namespace: '', restrictKubeConfigAccess: false, serverUrl: 'https://875D9268D454CB5CBD95F54559B3D856.gr7.us-east-1.eks.amazonaws.com') {
                        sh '''
                            kubectl patch service service -p "{\\"spec\\": {\\"selector\\": {\\"app\\": \\"boardgame\\", \\"version\\": \\"''' + newEnv + '''\\"}}}" 
                        '''
                    }
                    echo "Traffic has been switched to the ${newEnv} environment."
                }
            }
        }
    }
}